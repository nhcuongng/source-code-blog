import React, { useMemo } from 'react'
import { Link, graphql } from 'gatsby'
import Helmet from 'react-helmet'

import Layout from '../components/Layout'
import Posts from '../components/Posts'
import Guides from '../components/Guides'
import Projects from '../components/Projects'
import SEO from '../components/SEO'

import { getSimplifiedPosts } from '../utils/helpers'
import config from '../utils/config'

import projects from '../data/projects'
// import interviews from '../data/interviews'
// import speaking from '../data/speaking'

import nhcuong from '../../content/images/nhcuong.jpg'

export default function BlogIndex({ data }) {
  const latest = data.latest.edges
  const popular = data.popular.edges
  const simplifiedLatest = useMemo(() => getSimplifiedPosts(latest), [latest])
  const simplifiedPopular = useMemo(() => getSimplifiedPosts(popular), [
    popular,
  ])

  const Section = ({ title, children, button, ...props }) => (
    <section {...props}>
      <h2>
        {title}
        {button && (
          <Link className="section-button" to="/blog">
            View all
          </Link>
        )}
      </h2>
      {children}
    </section>
  )

  return (
    <Layout>
      <Helmet title={config.siteTitle} />
      <SEO />
      <section className="lead">
        <div className="container">
          <div className="copy">
            <h1>
              Hey! T√¥i l√† C∆∞·ªùng
              <br /> T√¥i l√† l·∫≠p tr√¨nh vi√™n c√πi b·∫Øp üë®‚Äçüåæ
            </h1>
            <p>
              ƒê√¢y l√† blog c√° nh√¢n c·ªßa t√¥i, n∆°i t√¥i chia s·∫ª nh·ªØng g√¨ h·ªçc ƒë∆∞·ª£c v√† nh·ªØng kinh nghi·ªám l√†m vi·ªác.
              M√¨nh ch·ªß y·∫øu l√†m vi·ªác v·ªõi Javascript (Typescript), c·ª• th·ªÉ l√† React Js v√† Node Js.
              {' '}B·∫°n c√≥ th·ªÉ ƒë·ªçc blog c·ªßa m√¨nh t·∫°i {' '}
              <Link to="/blog">ƒë√¢y</Link>{' '}
              ho·∫∑c t√¨m hi·ªÉu th√™m{' '}
              <Link to="/me">v·ªÅ m√¨nh</Link>.
            </p>
            <a
              href="mailto:cuong.nguyenhuu1997@gmail.com"
              target="_blank"
              rel="noreferrer"
              className="button"
            >
              <span className="emoji">üíå</span> Contact to me
            </a>
            <a
              href="https://docs.google.com/forms/d/e/1FAIpQLSfg1e-EZU3s5EJotrWram7_hjkx82vtJXU4aWABkSsaKMXZEQ/viewform?usp=sf_link"
              target="_blank"
              rel="noreferrer"
              className="button secondary"
            >
              <span className="emoji">üì£</span>
              Give Feedback
            </a>
          </div>

          <div className="image">
            <img src={nhcuong} alt="Tania" />
          </div>
        </div>
      </section>
      <div className="container index">
        <Section title="B√†i vi·∫øt m·ªõi nh·∫•t" button>
          <Posts data={simplifiedLatest} tags withDate />
        </Section>
        <Section title="B√†i vi·∫øt ph·ªï bi·∫øn" button>
          <Posts data={simplifiedPopular} tags withDate />
        </Section>
        <Section title="Projects">
          <Projects data={projects} />
        </Section>
        {/* <Section title="Interviews">
          <Guides data={interviews} />
        </Section>
        <Section title="Speaking">
          <Guides data={speaking} />
        </Section> */}
        <Section title="Source">
          <p>
            Thanks to <a href="https://www.taniarascia.com/">Tania Rascia</a> for awsome template
          </p>
          <a
            href="https://github.com/taniarascia/taniarascia.com/"
            target="_blank"
            rel="noreferrer"
            className="button"
          >
            <span className="emoji">ü§û </span> source this template
          </a>
        </Section>
      </div>
    </Layout>
  )
}

export const pageQuery = graphql`
  query IndexQuery {
    latest: allMarkdownRemark(
      limit: 5
      sort: { fields: [frontmatter___date], order: DESC }
      filter: { frontmatter: { template: { eq: "post" }, released: { eq: true } } }
    ) {
      edges {
        node {
          id
          fields {
            slug
          }
          frontmatter {
            date(formatString: "MMMM DD, YYYY") 
            title
            tags
          }
        }
      }
    }
    popular: allMarkdownRemark(
      limit: 20
      sort: { fields: [frontmatter___date], order: DESC }
      filter: { frontmatter: { categories: { eq: "Popular" }, released: { eq: true } } }
    ) {
      edges {
        node {
          id
          fields {
            slug
          }
          frontmatter {
            date(formatString: "MMMM DD, YYYY")
            title
            tags
          }
        }
      }
    }
  }
`
